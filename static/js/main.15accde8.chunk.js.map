{"version":3,"sources":["components/Container/Container.module.css","components/ContactForm/ContactForm.module.css","components/Container/Container.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","Container","title","children","className","s","container","Filter","filter","onChange","label","type","value","placeholder","input","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","resetForm","preventDefault","form","button","ContactList","contacts","onDeleteContact","list","map","id","item","onClick","App","JSON","parse","window","localStorage","getItem","setContacts","useEffect","setItem","stringify","setFilter","contact","shortid","generate","find","toLowerCase","alert","currentTarget","normalizedFilter","includes","getVisibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15accde8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3RIox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nfunction Container({ title, children }) {\n  return (\n    <div className={s.container}>\n      {title && <h2>{title}</h2>}\n      {children}\n    </div>\n  );\n}\n\nContainer.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nfunction Filter({ filter, onChange }) {\n  return (\n    <label className={s.label}>\n      Find contact by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={onChange}\n        placeholder=\"Enter name for search\"\n        className={s.input}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleChange}\n          className={s.input}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleChange}\n          className={s.input}\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const INITIAL_STATE = {\n//   name: '',\n//   number: '',\n// };\n\n// class ContactForm extends Component {\n//   state = INITIAL_STATE;\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n//     this.resetForm();\n//   };\n\n//   resetForm = () => this.setState(INITIAL_STATE);\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.form}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder=\"Enter name\"\n//             value={name}\n//             onChange={this.handleChange}\n//             className={s.input}\n//           />\n//         </label>\n//         <label className={s.label}>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             placeholder=\"Enter phone number\"\n//             value={number}\n//             onChange={this.handleChange}\n//             className={s.input}\n//           />\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <button\n            type=\"button\"\n            className={s.button}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport Container from './components/Container';\nimport Filter from './components/Filter';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  });\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n  const [filter, setFilter] = useState('');\n  const addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert('Contact is already exist');\n    } else if (!name || !number) {\n      alert('Some field is empty');\n    } else {\n      setContacts(contacts => [contact, ...contacts]);\n    }\n  };\n\n  const deleteContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  return (\n    <div>\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={addContact} />\n      </Container>\n      <Container title=\"Contacts\">\n        <Filter filter={filter} onChange={changeFilter} />\n        <ContactList\n          contacts={getVisibleContacts()}\n          onDeleteContact={deleteContact}\n        />\n      </Container>\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: shortid.generate(), name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: shortid.generate(), name: 'Hermione Kline', number: '443-89-12' },\n//       { id: shortid.generate(), name: 'Eden Clements', number: '645-17-79' },\n//       { id: shortid.generate(), name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n//   handleAddContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const { contacts } = this.state;\n\n//     if (\n//       contacts.find(\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\n//       )\n//     ) {\n//       alert('Contact is already exist');\n//     } else if (!name || !number) {\n//       alert('Some field is empty');\n//     } else\n//       this.setState(({ contacts }) => ({\n//         contacts: [contact, ...contacts],\n//       }));\n//   };\n\n//   handleDeleteContact = id =>\n//     this.setState(({ contacts }) => ({\n//       contacts: contacts.filter(contact => contact.id !== id),\n//     }));\n\n//   handleChangeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   render() {\n//     const visibleContacts = this.getVisibleContacts();\n//     const { filter } = this.state;\n//     return (\n//       <div>\n//         <Container>\n//           <h1>Phonebook</h1>\n//           <ContactForm onSubmit={this.handleAddContact} />\n//         </Container>\n//         <Container title=\"Contacts\">\n//           <Filter filter={filter} onChange={this.handleChangeFilter} />\n//           <ContactList\n//             contacts={visibleContacts}\n//             onDeleteContact={this.handleDeleteContact}\n//           />\n//         </Container>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"button\":\"ContactList_button__1RuFy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};"],"sourceRoot":""}